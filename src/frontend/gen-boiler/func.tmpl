{% import 'macros.tmpl' as macros %}
#include "func_ptr_types.h"
#include "proc_utils.h"

{% for func in fn_list -%}
extern "C" {{func.ret~" "~func.name}}({{macros.fn_arg_def(func)}})
{
    std::string func_name = "{{func.name}}";
    static {{func.name|upper}}_POINTER func_ptr = NULL;

    if (!func_ptr)
        func_ptr = ({{func.name|upper}}_POINTER)(ProcUtils::get_sym_addr(func_name));

    if (ProcUtils::test_and_set_flag(true))
        return (*func_ptr)({{macros.fn_arg_call(func)}});

    {% for arg in func.args if arg.read -%}
    {%- if arg.type == "FILE *" -%}
    int {{arg.name}}_fd = -1;
    if ({{arg.name}}) {{arg.name}}_fd = fileno({{arg.name}});
    {%- endif -%}
    {%- endfor %}
    uint64_t start_time = ProcUtils::get_time();

    {% if func.ret != "void" -%}
    {{func.ret}} ret = (*func_ptr)({{macros.fn_arg_call(func)}});
    {%- else -%}
    (*func_ptr)({{macros.fn_arg_call(func)}});
    {%- endif %}
    int errno_value = errno;

    uint64_t end_time = ProcUtils::get_time();

    FuncInfoMessage func_msg;

    {% if func.args|capture_arg %}KVPair* tmp_arg;{% endif %}
    {% for arg in func.args if arg.read %}
    tmp_arg = func_msg.add_args();
    tmp_arg->set_key("{{arg.name}}");
    {% if arg.type == "char *" or arg.type == "const char *" -%}
    std::string {{arg.name}}_value;
    if ({{arg.name}}) {{arg.name}}_value = {{arg.name}};
    tmp_arg->set_value({{arg.name}}_value);
    {%- elif arg.type == "FILE *" -%}
    tmp_arg->set_value(std::to_string({{arg.name}}_fd));
    {%- elif arg.type == "uid_t" -%}
    tmp_arg->set_value(ProcUtils::get_user_name({{arg.name}}));
    {%- elif arg.type == "gid_t" -%}
    tmp_arg->set_value(ProcUtils::get_group_name({{arg.name}}));
    {%- else -%}
    tmp_arg->set_value(std::to_string({{arg.name}}));
    {%- endif -%}
    {%- endfor %}

    {% if func.ret == "FILE *" -%}
    int ret_val = -1;
    if (ret) ret_val = fileno(ret);
    set_func_info_msg(&func_msg, func_name, ret_val, start_time, end_time, errno_value);
    {%- elif func.ret != "char *" and func.ret != "void" -%}
    set_func_info_msg(&func_msg, func_name, ret, start_time, end_time, errno_value);
    {%- else -%}
    set_func_info_msg(&func_msg, func_name, start_time, end_time, errno_value);
    {%- endif %}

    set_header_and_send(func_msg, PayloadType::FUNCINFO_MSG);

    ProcUtils::test_and_set_flag(false);
    {% if func.ret != "void" -%}
    return ret;
    {%- else -%}
    return;
    {%- endif %}
}

{% endfor %}

void opus_init_libc_funcs()
{
    {% for func in fn_list %} ProcUtils::add_sym_addr("{{func.name}}");
    {% endfor %}
}
