package fresco.opus.IPCMessage;

enum PayloadType {
    BLANK_MSG = 0;
    STARTUP_MSG = 1;
    LIBINFO_MSG = 2;
    FUNCINFO_MSG = 3;
    GENERIC_MSG = 4;
    TERM_MSG = 5;
    TELEMETRY_MSG = 6;
    AGGREGATION_MSG = 7;
}

enum GenMsgType {
    DISCON = 1; // Client disconnect
    SIGNAL = 2; // Unix signals recived by application
    PRE_FUNC_CALL = 3; // Use for functions like exec which dont return on succes
    THREAD_START = 4; // Sent during start of the thread routine
    THREAD_EXIT = 5; // Sent when a thread terminates
}

message KVPair {
    optional string key = 1;
    optional string value = 2;
}

message StartupMessage {
    optional string exec_name = 1;
    optional string cwd = 2;
    optional string cmd_line_args = 3;
    optional string user_name = 4;
    optional string group_name = 5;
    optional int64 ppid = 6;
    optional int64 start_time = 10;
    repeated KVPair environment = 7;
    repeated KVPair system_info = 8;
    repeated KVPair resource_limit = 9;
}

message LibInfoMessage {
    repeated KVPair library = 1; // Key is library path, value is an md5 signature
}

message FuncInfoMessage {
    optional string func_name = 1;
    repeated KVPair args = 2; // Key is argument type, value is the actual argument value
    optional int64 ret_val = 3;
    optional int64 begin_time = 4;
    optional int64 end_time = 5;
    optional int64 error_num = 6;
    optional string git_hash = 7;
}

message GenericMessage {
    optional GenMsgType msg_type = 1; // Type of generic message
    optional string msg_desc = 2; // Description of the message
}

message FrontendTelemetry {

    enum TelMsgType {
        CRITICAL = 1; // e.g: process crash
        SEVERE = 2; // e.g: memory allocation failure
    }

    optional TelMsgType msg_type = 2; // Telemetry message type
    optional string desc = 3; // Description of event
}

message TermMessage {
    optional int64 downtime_start = 1;
    optional int64 downtime_end = 2;

    enum TermState {
        SHUTDOWN = 1;
        CRASH = 2;
    }
    optional TermState reason = 3;
}

message AggregationMessage {
    repeated bytes messages = 1;
}

